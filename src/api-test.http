### =======================================
### MILESTONE 1: AUTHENTICATION ENDPOINTS
### =======================================

### 1. Register a new ADMINISTRATOR User
# @name registerAdmin
POST http://localhost:8080/api/v1/auth/register
Content-Type: application/json

{
  "firstName": "Admin",
  "lastName": "User",
  "email": "admin@example.com",
  "password": "password123",
  "role": "ADMINISTRATOR"
}

> {%
    client.global.set("admin_jwt", response.body.token);
%}


### 2. Attempt to register the SAME user again (Expect Error)
POST http://localhost:8080/api/v1/auth/register
Content-Type: application/json

{
  "firstName": "Admin",
  "lastName": "User",
  "email": "admin@example.com",
  "password": "password123",
  "role": "ADMINISTRATOR"
}


### 3. Login as the ADMINISTRATOR
# @name loginAdmin
POST http://localhost:8080/api/v1/auth/login
Content-Type: application/json

{
  "email": "admin@example.com",
  "password": "password123"
}

> {%
    client.global.set("admin_jwt", response.body.token);
%}


### 4. Attempt to login with a BAD password (Expect Error)
POST http://localhost:8080/api/v1/auth/login
Content-Type: application/json

{
  "email": "admin@example.com",
  "password": "wrongpassword"
}


### 5. Register a new ATTENDEE User
# @name registerAttendee
POST http://localhost:8080/api/v1/auth/register
Content-Type: application/json

{
  "firstName": "Attendee",
  "lastName": "One",
  "email": "attendee1@example.com",
  "password": "password123",
  "role": "ATTENDEE"
}

> {%
    client.global.set("attendee_jwt", response.body.token);
%}


### 6. Test a protected endpoint (requires authentication)
# This request should FAIL without a token.
GET http://localhost:8080/api/v1/some-protected-route


### 7. Test a protected endpoint with the ADMIN token
# This request should still fail with 404 (because the endpoint doesn't exist yet),
# but it will be allowed through the security filter.
GET http://localhost:8080/api/v1/some-protected-route
Authorization: Bearer {{admin_jwt}}
